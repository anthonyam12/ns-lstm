library(rpart)
?rpart
library(randomForest)
?randomForest
m <- matrix(c(7, 3, 3, -1), nrow=2, nrow=2)
m <- matrix(c(7, 3, 3, -1), nrow=2, ncol=2)
m
eigne(m)
eigen(m)
m <- matrix(c(3, 1, -1, 3), nrow=2, ncol=2)
eigen(m)
?rep
rep(1)
rep(1, 2)
rep(c(1, 2, 3), c(1, 3, 2))
rep(c(3), c(1, 2, 3))
rep(c(3, 5, 4), c(1, 2, 3))
rep(c(3, 5, 4), c(11, 22, 3))
x <- c(2.1, 2.5, 3, 3.5, 4, 4.5, 4.9)
y <- c(4.133, 5.727, 8.025, 10.6391, 13.546, 16.725, 19.452)
plot(x, y)
fit <- lm(x,y)
?lm
lm(y~x)
plot(x, y)
abline()
?abline
abline(a=-8.015, b=5.484)
?plot
plot(x, y, xlab="R(0)", ylab="lambda", main="Weapon Superiority Required for the Blue Army's Victory as the Red Army Grows")
plot(x, y, xlab="R(0)", ylab="lambda", main="Weapon Superiority to Win vs. Red Army Numerical Superiority")
plot(x, y, xlab="R(0)", ylab="lambda", main="Weapon Superiority to Win vs.Numerical Superiority")
plot(x, y, xlab="R(0)", ylab="lambda", main="Weapon Superiority to Win vs. Numerical Superiority")
abline(a=-8.015, b=5.484)
rate <- c(12, 14, 16, 18, 20)
days <- c(3208.56, 1210.89, 600.90, 333.89, 205.13)
plot(days~rate)
plot(days~rate, style='l')
?plot
plot(days~rate, type='l')
plot(days~rate, type='l', main='Days Until Paid vs. Arrival Rate')
height <- c(10.16,
7.62,
5.08,
2.54,
0
)
height
time <- c(0, 14.37, 30.80, 54.49, 79.05)
plot(height~time)
lm(height~time)
mdl <- lm(height~time)
abline(mdl)
points(log(height)~log(time))
plot(log(height)~log(time))
mdl2 <- lm(log(height)~log(time))
log(time)
log(height)
log(height[-1])
log(height[-4])
log(height[-3])
log(height[-2])
log(height[-5])
mdl2 <- lm(log(height[-1])~log(time[-5]))
mdl2 <- lm(log(height[-5])~log(time[-1]))
summary(mdl)
summary(mdl2)
abline(mdl2)
install.packages('knitr', repos=c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"), type = "source")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
t <- c(0, 10, 20, 30, 40, 50)
h <- c(14, 10.6, 8.5, 6.7, 4.9, 3.5)
plot(h~t)
d.lm <- lm(h~t)
abline(d.lm)
?lm
?poly
d.nlm <- lm(h~t+I(t^2))
plot(h~t)
abline(d.nlm)
summary(d.nlm)
summary(lm)
summary(d.lm)
# Set data
h <- c(14, 10.6, 8.5, 6.7, 4.9, 3.5)
t <- c(0, 10, 20, 30, 40, 50)
# fit a linear model
d.lm <- lm(h~t)
summary(d.lm)
# fit to a curve
d.nlm <- lm(h~t+I(t^2))
summary(d.nlm)
# plot data
d.lm$residuals
d.lm$coefficients
# Set data
h <- c(14, 10.6, 8.5, 6.7, 4.9, 3.5)
t <- c(0, 10, 20, 30, 40, 50)
# fit a linear model
d.lm <- lm(h~t)
# summary(d.lm)
print(paste('R^2 for linear model', summary(d.lm)$r.squared))
# fit to a curve
d.nlm <- lm(h~t+I(t^2))
# summary(d.nlm)
print(paste('R^2 for non-linear model', summary(d.nlm)$r.squared))
plot(h~t)
abline(d.lm)
?abline
lines(predict(d.nlm))
predict(d.nlm)
plot(h~t)
lines(predict(d.nlm), t)
lines(t, predict(d.nlm))
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve')
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlabel='time')
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height')
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='green')
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='purple')
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=14)
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=19)
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
lines(t, predict(d.nlm), pch=17, col='red', type='b', lty=2)
legend(12, 40, legend=c('Actual', 'Linear Fit', ))
legend(12, 40, legend=c('Actual', 'Best Fit Line', 'Fit Curve'), col=c('black', 'blue', 'red'), lty=c(0, 2, 2))
legend(2, 20, legend=c('Actual', 'Best Fit Line', 'Fit Curve'), col=c('black', 'blue', 'red'), lty=c(0, 2, 2))
legend(2, 20, legend=c('Actual', 'Best Fit Line', 'Fit Curve'), col=c('black', 'blue', 'red'), lty=c(0, 2, 2), cex=0.8)
legend(legend=c('Actual', 'Best Fit Line', 'Fit Curve'), col=c('black', 'blue', 'red'), lty=c(0, 2, 2), cex=0.8)
legend(1, 10, legend=c('Actual', 'Best Fit Line', 'Fit Curve'), col=c('black', 'blue', 'red'), lty=c(0, 2, 2), cex=0.8)
legend(30, 14, legend=c(Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
legend(30, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
legend(40, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
legend(35, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=19)
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
lines(t, predict(d.nlm), pch=17, col='red', type='b', lty=2)
legend(35, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
# Plot the data with the best fit line and the best fit curve
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=19)
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
lines(t, predict(d.nlm), pch=17, col='red', type='b', lty=2)
legend(35, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
dir
cd()
setwd('D:/Users/amorast')
setwd("~/GitHub/ns-lstm/data")
eu <- read.csv('EURUSD.csv')
eu
eu.lm <- lm(eu$EUR.USD~eu$Date)
summary(eu.lm)
centered <- eu$EUR.USD - mean(eu$EUR.USD)
centered
mean(centered)
eu$EUR.USD[200]
centered[200]
centered[200] + mean(eu$EUR.USD)
plot(centered)
plot(eu$EUR.USD)
plot(eu$EUR.USD, type='l')
# Plot the data with the best fit line and the best fit curve
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=19)
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
lines(t, predict(d.nlm), pch=17, col='red', type='b', lty=2)
legend(35, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
# Set data
h <- c(14, 10.6, 8.5, 6.7, 4.9, 3.5)
t <- c(0, 10, 20, 30, 40, 50)
# fit a linear model
d.lm <- lm(h~t)
# summary(d.lm)
print(paste('R^2 for linear model', summary(d.lm)$r.squared))
# fit to a curve
d.nlm <- lm(h~t+I(t^2))
# summary(d.nlm)
print(paste('R^2 for non-linear model', summary(d.nlm)$r.squared))
# Plot the data with the best fit line and the best fit curve
plot(h~t, main='Actual vs. Fitted Line vs. Fitted Curve', xlab='time', ylab='height', col='black', pch=19)
lines(t, predict(d.lm), pch=18, col='blue', type='b', lty=2)
lines(t, predict(d.nlm), pch=17, col='red', type='b', lty=2)
legend(35, 14, legend=c('Best Fit Line', 'Fit Curve'), col=c('blue', 'red'), lty=2, cex=0.8)
eu
plot(eu)
plot(eu$EUR.USD)
source('~/linear_test.R')
??svm
source('~/linear_test.R')
source('~/linear_test.R')
lm(eu$EUR.USD[1:25])
lm(eu[1:25,])
lm(eu[1:25,2]~eu[1:25,1])
summary(lm(eu[1:25,2]~eu[1:25,1]))
eu[1:25,1``]
eu[1:25,1]
summary(lm(eu[1:25,2]~c(1:25))
)
summary(lm(eu[1:30,2]~c(1:30)))
summary(lm(eu[1:35,2]~c(1:35)))
summary(lm(eu[1:40,2]~c(1:40)))
summary(lm(eu[1:50,2]~c(1:50)))
summary(lm(eu[1:100,2]~c(1:100)))
plot(eu[1:100,2])
abline(lm(eu[1:100,2]~c(1:100)))
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
rs
source('~/linear_test.R')
source('~/linear_test.R')
for(i in 1:100){print(i)}
source('~/linear_test.R')
run()
source('~/linear_test.R')
run()
source('~/linear_test.R')
1:1
plot(eu$EUR.USD)
source('~/linear_test.R')
source('~/linear_test.R')
run()
source('~/linear_test.R')
run()
plot(eu$EUR.USD)
abline(lm(eu$EUR.USD)~c(1:4935))
mdl <- lm(eu$EUR.USD)~c(1:4935)
mdl
abline(lm(eu$EUR.USD~c(1:4935)))
source('~/linear_test.R')
source('~/linear_test.R')
abline(lm(eu$EUR.USD~c(1:4935)))
run()
source('~/linear_test.R')
length(c(1, 2, 3))
c(1,2,3)[3]
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
source('~/linear_test.R')
run()
source('~/linear_test.R')
source('~/linear_test.R')
dfs <- run()
dfs
source('~/linear_test.R')
abs(-3)
source('~/linear_test.R')
dfs <- run()
dfs
source('~/linear_test.R')
source('~/linear_test.R')
eu
library(forecast)
forecast::taylor
library(tseries)
tseries::adf.test(eu$EUR.USD)
tseries::adf.test(eu$EUR.USD[1:100])
tseries::adf.test(eu$EUR.USD[1:50])
tseries::adf.test(eu$EUR.USD[1:20])
tseries::adf.test(eu$EUR.USD[1:75])
tseries::adf.test(eu$EUR.USD[1:2100])
tseries::adf.test(eu$EUR.USD[1:2200])
tseries::adf.test(eu$EUR.USD[1:2300])
tseries::adf.test(eu$EUR.USD[1:2220])
tseries::adf.test(eu$EUR.USD[1:2240])
tseries::adf.test(eu$EUR.USD[1:2250])
tseries::adf.test(eu$EUR.USD[1:2260])
tseries::adf.test(eu$EUR.USD[1:2)
tseries::adf.test(eu$EUR.USD[1:2])
tseries::adf.test(eu$EUR.USD[1:4])
tseries::adf.test(eu$EUR.USD[1:10])
tseries::adf.test(eu$EUR.USD[1:15])
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
test <- seq(1, 1, 100)
test
test <- seq(1, 100, 1)
test
adf.test(test)
test <- seq(1, 10000, 1)
adf.test(test)
install.packages("aTSA")
library(aTSA)
remove(tseries)
detach(tseries)
detach("tseries")
detach("tseries", TRUE)
aTSA::adf.test(eu$EUR.USD)
aTSA::adf.test(test)
summary(lm(test~test))
kpss.test(eu$EUR.USD)
kpss.test(eu$EUR.USD[1:100])
adf.test(eu$EUR.USD)
adf.test(eu$EUR.USD[1:100])
adf.test(eu$EUR.USD[1:50])
adf.test(eu$EUR.USD[1:500])
auto.arima(eu$EUR.USD)
auto.arima(eu$EUR.USD[1:2000])
diff(test)
diff(test, 1)
diff(diff(1))
install.packages("xts")
install.packages("xts")
install.packages("xts")
diff.xts(test, 1)
diff
diff(eu$EUR.USD, lag=1)
eu$EUR.USD[1:2]
install.packages("kerasR")
library(kerasR)
cwd
source('~/linear_test.R')
